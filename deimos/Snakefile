from os.path import *
import deimos
import numpy as np
from os.path import *
import pandas as pd
import glob


# infer wildcards from inputs
fns = [basename(x) for x in glob.glob(join('input', '*.*'))]
IDS = [splitext(splitext(x)[0])[0] for x in fns]
lookup = {k: v for k, v in zip(IDS, fns)}


rule all:
    input:
        expand(join('output', 'standards', '{id}.h5'), id=IDS),
        expand(join('output', 'aligned', '{id}.h5'), id=IDS)


rule mzml2hdf:
    input:
        lambda wildcards: join('input', lookup[wildcards.id])
    output:
        join('output', 'parsed', '{id}.h5')
    run:
        data = deimos.utils.read_mzml(input[0], accession=config['accession'])
        deimos.utils.save_hdf(output[0], data)


rule peakpick_ms1:
    input:
        rules.mzml2hdf.output
    output:
        join('output', 'peakpick', '{id}_ms1_peaks.h5')
    run:
        data = deimos.utils.load_hdf(input[0], level='ms1')
        peaks = deimos.peakpick.auto(data,
                                     features=config['features'],
                                     **config['peakpick'])
        deimos.utils.save_hdf(output[0], {'ms1': peaks})


rule detect_standards:
    input:
        rules.peakpick_ms1.output
    output:
        join('output', 'standards', '{id}.h5')
    run:
        data = deimos.utils.load_hdf(input[0], level='ms1')

        if 'pos' in input[0].lower():
            masses = np.loadtxt(config['standards']['pos'])
        elif 'neg' in input[0].lower():
            masses = np.loadtxt(config['standards']['neg'])

        peaks = deimos.alignment.internal_standards(data,
                                                    masses=masses,
                                                    tol=config['standards']['tol'])
        deimos.utils.save_hdf(output[0], {'ms1': peaks})


rule alignment:
    input:
        rules.peakpick_ms1.output
    output:
        join('output', 'aligned', '{id}.h5'),
        join('output', 'aligned', '{id}.regression')
    run:
        # load
        a = deimos.utils.load_hdf(input[0], level='ms1')
        b = deimos.utils.load_hdf(join('output', 'peakpick', '{}_ms1_peaks.h5'.format(config['alignment']['reference'])),
                                  level='ms1')

        # threshold
        a_ = deimos.utils.threshold(a, threshold=config['alignment']['threshold'])
        b_ = deimos.utils.threshold(b, threshold=config['alignment']['threshold'])

        # align
        a_, b_ = deimos.alignment.match_features(a_, b_,
                                                 features=config['features'],
                                                 tol=config['alignment']['tol'])

        # fit
        regress = deimos.alignment.fit(a_, b_, features=config['features'])

        # apply
        a = regress.apply(a)
        deimos.utils.save_hdf(output[0], {'ms1': a})

        # save regression
        with open(output[1], 'w') as f:
            f.write(regress.__repr__())
