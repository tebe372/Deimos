from os.path import *
import deimos
import numpy as np
from os.path import *
import pandas as pd
import glob

import matplotlib
matplotlib.use('agg')
import matplotlib.pyplot as plt


# infer wildcards from inputs
fns = [basename(x) for x in glob.glob(join('input', '*.*'))]
IDS = [splitext(splitext(x)[0])[0] for x in fns]
lookup = {k: v for k, v in zip(IDS, fns)}


rule all:
    input:
        expand(join('output', 'aligned', '{id}.h5'), id=IDS)


rule mzml2hdf:
    input:
        lambda wildcards: join('input', lookup[wildcards.id])
    output:
        join('output', 'parsed', '{id}.h5')
    run:
        data = deimos.utils.read_mzml(input[0], accession=config['accession'])
        deimos.utils.save_hdf(output[0], data)


rule peakpick_ms1:
    input:
        rules.mzml2hdf.output
    output:
        join('output', 'peakpick', '{id}_ms1_peaks.h5')
    run:
        data = deimos.utils.load_hdf(input[0], level='ms1')
        peaks = deimos.peakpick.auto(data,
                                     features=config['features'],
                                     **config['peakpick'])
        deimos.utils.save_hdf(output[0], {'ms1': peaks})


rule detect_standards:
    input:
        rules.peakpick_ms1.output
    output:
        join('output', 'standards', '{id}.h5')
    run:
        data = deimos.utils.load_hdf(input[0], level='ms1')

        if 'pos' in input[0].lower():
            masses = np.loadtxt(config['standards']['pos'])
        elif 'neg' in input[0].lower():
            masses = np.loadtxt(config['standards']['neg'])

        peaks = deimos.alignment.internal_standards(data,
                                                    masses=masses,
                                                    tol=config['standards']['tol'])
        deimos.utils.save_hdf(output[0], {'ms1': peaks})


rule alignment:
    input:
        rules.peakpick_ms1.output
    output:
        join('output', 'aligned', '{id}.h5'),
        join('output', 'splines', '{id}.npy'),
        join('output', 'splines', '{id}_1.png'),
        join('output', 'splines', '{id}_2.png')
    run:
        # reference
        ref = join('output', 'peakpick', '{}_ms1_peaks.h5'.format(config['alignment']['reference']))

        # load
        a = deimos.utils.load_hdf(input[0], level='ms1')
        b = deimos.utils.load_hdf(ref, level='ms1')

        # threshold
        a_ = deimos.utils.threshold(a, threshold=config['alignment']['threshold'])
        b_ = deimos.utils.threshold(b, threshold=config['alignment']['threshold'])

        # align
        a_match, b_match = deimos.alignment.match_features(a_, b_,
                                                           features=config['features'],
                                                           tol=config['alignment']['tol'],
                                                           ignore=config['alignment']['align'])

        # fit
        spl, spl_inv = deimos.alignment.fit_spline(a_match, b_match, align=config['alignment']['align'],
                                                   frac=config['alignment']['lowess']['fraction'],
                                                   it=config['alignment']['lowess']['iterations'],
                                                   s=config['alignment']['lowess']['smoothing'])

        # figure
        newx = np.linspace(a[config['alignment']['align']].min(),
                           b[config['alignment']['align']].max(),
                           1000)

        fig, ax = plt.subplots(dpi=150)
        ax.plot(newx, spl(newx), c='C3')
        ax.scatter(a_match[config['alignment']['align']],
                   b_match[config['alignment']['align']],
                   color='black', s=2)

        ax.set_xlabel(config['alignment']['align'], fontweight='bold')
        ax.set_ylabel(config['alignment']['align'], fontweight='bold')
        plt.tight_layout()
        plt.savefig(output[2])
        plt.close()

        # second iteration
        a_[config['alignment']['align']] = spl(a_[config['alignment']['align']].values)

        # align
        a_match, b_match = deimos.alignment.match_features(a_, b_,
                                                           features=config['features'],
                                                           tol=config['alignment']['tol'],
                                                           ignore=config['alignment']['align'])

        # fit
        spl2, spl_inv2 = deimos.alignment.fit_spline(a_match, b_match, config['alignment']['align'],
                                                     frac=config['alignment']['lowess']['fraction'],
                                                     it=config['alignment']['lowess']['iterations'],
                                                     s=config['alignment']['lowess']['smoothing'])

        # figure
        fig, ax = plt.subplots(dpi=150)
        ax.plot(newx, spl2(newx), c='C3')
        ax.scatter(a_match[config['alignment']['align']],
                   b_match[config['alignment']['align']],
                   color='black', s=2)

        ax.set_xlabel(config['alignment']['align'], fontweight='bold')
        ax.set_ylabel(config['alignment']['align'], fontweight='bold')
        plt.tight_layout()
        plt.savefig(output[3])
        plt.close()

        # transform data
        a[config['alignment']['align']] = spl2(spl(a[config['alignment']['align']].values))

        # save transformed input
        deimos.utils.save_hdf(output[0], {'ms1': a})

        # save splines
        splines = {'forward1': spl,
                   'inverse1': spl_inv,
                   'forward2': spl2,
                   'inverse2': spl_inv2}
        np.save(output[1], splines)
