from os.path import *
import spextractor as spx
import numpy as np
from os.path import *


# infer wildcards from inputs
IDS, = glob_wildcards(join('input', '{id}.d'))


rule all:
    input:
        expand(join('output', 'peaks', '{id}_ms{level}.h5'), id=IDS, level=[1, 2])


rule agilent2mzml:
    input:
        join('input', '{id}.d')
    output:
        join('output', 'raw', '{id}.mzML.gz')
    log:
        join('output', 'logs', 'agilent2mzml', '{id}.log')
    run:
        outdir = dirname(output[0])
        shell('msconvert.exe {input} -o {outdir} --32 --mz32 --inten32 -z -g --filter “defaultArrayLength 20-” > {log} 2>&1')


rule mzml2hdf:
    input:
        rules.agilent2mzml.output
    output:
        join('output', 'parsed', '{id}.h5')
    run:
        spx.process.mzml2hdf(input[0], output[0])


rule peakpicking:
    input:
        rules.mzml2hdf.output
    output:
        join('output', 'peaks', '{id}_ms1.h5'),
        join('output', 'peaks', '{id}_ms2.h5')
    run:
        data = spx.utils.load_hdf(input[0])
        for i in [1, 2]:
            msn = data.loc[data['ms_level'] == i, :].drop('ms_level', axis=1).reset_index(drop=True)
            grid = spx.peakpicking.nonmaximumsuppression(msn, xbins='auto', ybins='auto', fwhm=3, sum_peaks=True)
            peaks = spx.peakpicking.grid2df(**grid, top=None)
            spx.utils.save_hdf(peaks, output[i - 1])
